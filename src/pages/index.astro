---
import Navbar from '../components/Navbar.astro';
import Footer from '../components/Footer.astro';
import GiftCard from '../components/GiftCard.astro';
import FilterPanel from '../components/FilterPanel.astro';
import AdSpace from '../components/AdSpace.astro';
import PersonalizedSection from '../components/PersonalizedSection.astro';
import Layout from '../layouts/Layout.astro';
import { gifts } from '../data/gifts.ts';

const personalizedGifts = gifts.filter(gift => gift.type === 'personalizado');
---

<Layout>
  <Navbar />
  
  <!-- Hero Section -->
  <section class="hero">
    <div class="hero-content">
      <div class="hero-text">
        <h1>🎁 Encuentra el Regalo Perfecto</h1>
        <p class="hero-subtitle">
          Descubre miles de ideas de regalos únicos para cada ocasión especial. 
          Desde tecnología hasta regalos personalizados, tenemos todo lo que necesitas.
        </p>
        <div class="hero-stats">
          <div class="stat">
            <span class="stat-number">{gifts.length}+</span>
            <span class="stat-label">Ideas de Regalos</span>
          </div>
          <div class="stat">
            <span class="stat-number">8</span>
            <span class="stat-label">Categorías</span>
          </div>
          <div class="stat">
            <span class="stat-number">{personalizedGifts.length}</span>
            <span class="stat-label">Regalos Personalizados</span>
          </div>
        </div>
        <div class="hero-buttons">
          <a href="#regalos" class="btn btn-primary">Explorar Regalos</a>
          <a href="#personalizados" class="btn btn-secondary">Regalos Personalizados</a>
        </div>
      </div>
      <div class="hero-image">
        <div class="floating-gifts">
          <div class="gift-float gift-1">🎁</div>
          <div class="gift-float gift-2">💝</div>
          <div class="gift-float gift-3">🎀</div>
          <div class="gift-float gift-4">🎊</div>
          <div class="gift-float gift-5">✨</div>
        </div>
      </div>
    </div>
  </section>

  <!-- Top Banner Ad -->
  <AdSpace size="banner" position="top" slot="1234567890" />

  <!-- Categories Preview -->
  <section class="categories-preview" id="categorias">
    <div class="container">
      <h2>🏷️ Explora por Categorías</h2>
      <div class="categories-grid">
        <div class="category-card" data-category="Tecnología">
          <div class="category-icon">📱</div>
          <h3>Tecnología</h3>
          <p>Gadgets y dispositivos innovadores</p>
        </div>
        <div class="category-card" data-category="Artesanía">
          <div class="category-icon">🎨</div>
          <h3>Artesanía</h3>
          <p>Creaciones únicas hechas a mano</p>
        </div>
        <div class="category-card" data-category="Deportes">
          <div class="category-icon">⚽</div>
          <h3>Deportes</h3>
          <p>Para los amantes del deporte</p>
        </div>
        <div class="category-card" data-category="Hogar">
          <div class="category-icon">🏠</div>
          <h3>Hogar</h3>
          <p>Decoración y funcionalidad</p>
        </div>
        <div class="category-card" data-category="Moda">
          <div class="category-icon">👗</div>
          <h3>Moda</h3>
          <p>Estilo y elegancia</p>
        </div>
        <div class="category-card" data-category="Experiencias">
          <div class="category-icon">🎪</div>
          <h3>Experiencias</h3>
          <p>Momentos inolvidables</p>
        </div>
      </div>
    </div>
  </section>

  <!-- Personalized Section -->
  <PersonalizedSection />

  <!-- Mobile Ad -->
  <AdSpace size="mobile" slot="4567890123" />

  <!-- Main Gifts Section -->
  <section class="gifts-section" id="regalos">
    <div class="container">
      <div class="section-header">
        <h2>🎯 Todas las Ideas de Regalos</h2>
        <p>Filtra y encuentra exactamente lo que buscas</p>
      </div>

      <!-- Filters -->
      <FilterPanel />

      <div class="gifts-layout">
        <!-- Sidebar Ad -->
        <div class="sidebar-ads">
          <AdSpace size="sidebar" position="sticky-sidebar" slot="2345678901" />
          <AdSpace size="square" slot="3456789012" />
        </div>

        <!-- Gifts Grid -->
        <div class="gifts-container">
          <div class="gifts-grid" id="gifts-grid">
            {gifts.map(gift => (
              <GiftCard gift={gift} />
            ))}
          </div>
          
          <!-- No results message -->
          <div class="no-results" id="no-results" style="display: none;">
            <div class="no-results-content">
              <div class="no-results-icon">🔍</div>
              <h3>No se encontraron regalos</h3>
              <p>Intenta ajustar los filtros para encontrar más opciones</p>
              <button class="btn btn-primary" onclick="clearAllFilters()">Limpiar Filtros</button>
            </div>
          </div>
        </div>
      </div>
    </div>
  </section>

  <!-- Bottom Banner Ad -->
  <AdSpace size="banner" position="bottom" slot="1234567891" />

  <!-- Contact Section -->
  <section class="contact-section" id="contacto">
    <div class="container">
      <div class="contact-content">
        <div class="contact-info">
          <h2>💬 ¿Necesitas Ayuda?</h2>
          <p>¿No encuentras el regalo perfecto? ¡Estamos aquí para ayudarte!</p>
          <div class="contact-methods">
            <div class="contact-method">
              <span class="contact-icon">📧</span>
              <div>
                <h4>Email</h4>
                <p>contacto@ideasregalo.cl</p>
              </div>
            </div>
            <div class="contact-method">
              <span class="contact-icon">💬</span>
              <div>
                <h4>Chat en Vivo</h4>
                <p>Disponible 24/7</p>
              </div>
            </div>
            <div class="contact-method">
              <span class="contact-icon">🎨</span>
              <div>
                <h4>Regalos Personalizados</h4>
                <p><a href="https://www.sanjigen.cl" target="_blank">www.sanjigen.cl</a></p>
              </div>
            </div>
            <div class="contact-method">
              <span class="contact-icon">📋</span>
              <div>
                <h4>Información Legal</h4>
                <p><a href="/privacy">Política de Privacidad</a> | <a href="/terms">Términos</a></p>
              </div>
            </div>
          </div>
        </div>
        <div class="contact-form">
          <h3>Envíanos un Mensaje</h3>
          <form class="form">
            <input type="text" placeholder="Tu nombre" class="form-input" required>
            <input type="email" placeholder="Tu email" class="form-input" required>
            <select class="form-input" required>
              <option value="">¿En qué podemos ayudarte?</option>
              <option value="regalo">Busco un regalo específico</option>
              <option value="personalizado">Quiero algo personalizado</option>
              <option value="consulta">Tengo una consulta</option>
              <option value="otro">Otro</option>
            </select>
            <textarea placeholder="Cuéntanos más detalles..." class="form-textarea" rows="4" required></textarea>
            <button type="submit" class="btn btn-primary">Enviar Mensaje</button>
          </form>
        </div>
      </div>
    </div>
  </section>

  <Footer />
</Layout>

<style>
  /* Hero Section */
  .hero {
    background: linear-gradient(135deg, #1e8449 0%, #27ae60 100%);
    background-image: url('https://images.pexels.com/photos/3184465/pexels-photo-3184465.jpeg?auto=compress&cs=tinysrgb&w=1920');
    background-size: cover;
    background-position: center;
    background-blend-mode: multiply;
    color: white;
    padding: 120px 0 80px;
    margin-top: 70px;
    position: relative;
    overflow: hidden;
  }

  .hero::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><defs><pattern id="heroPattern" width="20" height="20" patternUnits="userSpaceOnUse"><circle cx="10" cy="10" r="1" fill="rgba(255,255,255,0.1)"/></pattern></defs><rect width="100" height="100" fill="url(%23heroPattern)"/></svg>');
  }

  .hero-content {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 20px;
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 60px;
    align-items: center;
    position: relative;
    z-index: 1;
  }

  .hero-text h1 {
    font-size: 3.5rem;
    margin-bottom: 20px;
    color: white;
    text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.7);
    line-height: 1.2;
  }

  .hero-subtitle {
    font-size: 1.3rem;
    margin-bottom: 40px;
    opacity: 0.9;
    line-height: 1.6;
  }

  .hero-stats {
    display: flex;
    gap: 40px;
    margin-bottom: 40px;
  }

  .stat {
    text-align: center;
  }

  .stat-number {
    display: block;
    font-size: 2.5rem;
    font-weight: bold;
    color: #f1c40f;
  }

  .stat-label {
    font-size: 0.9rem;
    opacity: 0.8;
  }

  .hero-buttons {
    display: flex;
    gap: 20px;
  }

  .btn {
    padding: 15px 30px;
    border: none;
    border-radius: 25px;
    font-weight: bold;
    cursor: pointer;
    transition: all 0.3s ease;
    text-decoration: none;
    font-size: 1rem;
    display: inline-block;
    text-align: center;
  }

  .btn-primary {
    background: linear-gradient(45deg, #e74c3c, #f39c12);
    color: white;
  }

  .btn-primary:hover {
    transform: translateY(-3px);
    box-shadow: 0 10px 25px rgba(231, 76, 60, 0.4);
  }

  .btn-secondary {
    background: rgba(255, 255, 255, 0.2);
    color: white;
    border: 2px solid rgba(255, 255, 255, 0.3);
  }

  .btn-secondary:hover {
    background: rgba(255, 255, 255, 0.3);
    transform: translateY(-3px);
  }

  .hero-image {
    position: relative;
    height: 400px;
  }

  .floating-gifts {
    position: relative;
    width: 100%;
    height: 100%;
  }

  .gift-float {
    position: absolute;
    font-size: 3rem;
    animation: float 6s ease-in-out infinite;
  }

  .gift-1 { top: 10%; left: 20%; animation-delay: 0s; }
  .gift-2 { top: 30%; right: 10%; animation-delay: 1s; }
  .gift-3 { bottom: 30%; left: 10%; animation-delay: 2s; }
  .gift-4 { bottom: 10%; right: 30%; animation-delay: 3s; }
  .gift-5 { top: 50%; left: 50%; animation-delay: 4s; transform: translate(-50%, -50%); }

  @keyframes float {
    0%, 100% { transform: translateY(0px) rotate(0deg); }
    50% { transform: translateY(-20px) rotate(5deg); }
  }

  /* Categories Preview */
  .categories-preview {
    padding: 80px 0;
    background: linear-gradient(rgba(30, 132, 73, 0.8), rgba(39, 174, 96, 0.8)), url('https://images.pexels.com/photos/3184306/pexels-photo-3184306.jpeg?auto=compress&cs=tinysrgb&w=1920');
    background-size: cover;
    background-position: center;
  }

  .container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 20px;
  }

  .categories-preview h2 {
    text-align: center;
    font-size: 2.5rem;
    margin-bottom: 50px;
    color: white;
    text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.7);
  }

  .categories-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 30px;
  }

  .category-card {
    background: white;
    padding: 40px 30px;
    border-radius: 20px;
    text-align: center;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
    transition: all 0.3s ease;
    cursor: pointer;
  }

  .category-card:hover {
    transform: translateY(-10px);
    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.15);
  }

  .category-icon {
    font-size: 4rem;
    margin-bottom: 20px;
  }

  .category-card h3 {
    font-size: 1.5rem;
    margin-bottom: 15px;
    color: #2c3e50;
  }

  .category-card p {
    color: #7f8c8d;
    line-height: 1.5;
  }

  /* Gifts Section */
  .gifts-section {
    padding: 80px 0;
    background: linear-gradient(rgba(255, 255, 255, 0.9), rgba(255, 255, 255, 0.9)), url('https://images.pexels.com/photos/3184338/pexels-photo-3184338.jpeg?auto=compress&cs=tinysrgb&w=1920');
    background-size: cover;
    background-position: center;
  }

  .section-header {
    text-align: center;
    margin-bottom: 50px;
  }

  .section-header h2 {
    font-size: 2.5rem;
    margin-bottom: 15px;
    color: #2c3e50;
  }

  .section-header p {
    font-size: 1.2rem;
    color: #7f8c8d;
  }

  .gifts-layout {
    display: grid;
    grid-template-columns: 320px 1fr;
    gap: 40px;
    align-items: start;
  }

  .sidebar-ads {
    display: flex;
    flex-direction: column;
    gap: 20px;
    position: sticky;
    top: 100px;
  }

  .gifts-container {
    min-height: 500px;
  }

  .gifts-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
    gap: 30px;
  }

  .no-results {
    text-align: center;
    padding: 80px 20px;
  }

  .no-results-content {
    max-width: 400px;
    margin: 0 auto;
  }

  .no-results-icon {
    font-size: 5rem;
    margin-bottom: 20px;
    opacity: 0.5;
  }

  .no-results h3 {
    font-size: 1.8rem;
    margin-bottom: 15px;
    color: #2c3e50;
  }

  .no-results p {
    color: #7f8c8d;
    margin-bottom: 30px;
    line-height: 1.6;
  }

  /* Contact Section */
  .contact-section {
    background: linear-gradient(135deg, #145a32 0%, #1e8449 100%);
    background-image: url('https://images.pexels.com/photos/3184291/pexels-photo-3184291.jpeg?auto=compress&cs=tinysrgb&w=1920');
    background-size: cover;
    background-position: center;
    background-blend-mode: multiply;
    color: white;
    padding: 80px 0;
  }

  .contact-content {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 60px;
    align-items: start;
  }

  .contact-info h2 {
    font-size: 2.5rem;
    margin-bottom: 20px;
  }

  .contact-info p {
    font-size: 1.2rem;
    margin-bottom: 40px;
    opacity: 0.9;
  }

  .contact-methods {
    display: flex;
    flex-direction: column;
    gap: 30px;
  }

  .contact-method {
    display: flex;
    align-items: center;
    gap: 20px;
  }

  .contact-icon {
    font-size: 2.5rem;
    width: 60px;
    text-align: center;
  }

  .contact-method h4 {
    margin: 0 0 5px 0;
    font-size: 1.2rem;
  }

  .contact-method p {
    margin: 0;
    opacity: 0.8;
  }

  .contact-method a {
    color: #58d68d;
    text-decoration: none;
  }

  .contact-method a:hover {
    text-decoration: underline;
  }

  .contact-form {
    background: rgba(255, 255, 255, 0.1);
    padding: 40px;
    border-radius: 20px;
    backdrop-filter: blur(10px);
  }

  .contact-form h3 {
    font-size: 1.8rem;
    margin-bottom: 30px;
    text-align: center;
  }

  .form {
    display: flex;
    flex-direction: column;
    gap: 20px;
  }

  .form-input,
  .form-textarea {
    padding: 15px;
    border: 2px solid rgba(255, 255, 255, 0.2);
    border-radius: 10px;
    background: rgba(255, 255, 255, 0.1);
    color: white;
    font-size: 16px;
  }

  .form-input::placeholder,
  .form-textarea::placeholder {
    color: rgba(255, 255, 255, 0.7);
  }

  .form-input:focus,
  .form-textarea:focus {
    outline: none;
    border-color: #58d68d;
    background: rgba(255, 255, 255, 0.15);
  }

  .form-textarea {
    resize: vertical;
    min-height: 100px;
  }

  /* Responsive Design */
  @media screen and (max-width: 1024px) {
    .gifts-layout {
      grid-template-columns: 1fr;
    }

    .sidebar-ads {
      position: static;
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
      gap: 20px;
      margin-bottom: 40px;
    }
  }

  @media screen and (max-width: 768px) {
    .hero-content {
      grid-template-columns: 1fr;
      text-align: center;
      gap: 40px;
    }

    .hero-text h1 {
      font-size: 2.5rem;
    }

    .hero-stats {
      justify-content: center;
      gap: 30px;
    }

    .hero-buttons {
      justify-content: center;
      flex-wrap: wrap;
    }

    .gifts-grid {
      grid-template-columns: 1fr;
    }

    .contact-content {
      grid-template-columns: 1fr;
      gap: 40px;
    }

    .contact-methods {
      gap: 20px;
    }

    .contact-method {
      flex-direction: column;
      text-align: center;
      gap: 10px;
    }

    .categories-grid {
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      gap: 20px;
    }

    .category-card {
      padding: 30px 20px;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const giftsGrid = document.getElementById('gifts-grid');
    const noResults = document.getElementById('no-results');
    let allGifts = [];

    // Get all gift cards
    function getAllGifts() {
      return Array.from(document.querySelectorAll('.gift-card'));
    }

    // Initialize gifts array
    allGifts = getAllGifts();

    // Listen for filter changes
    document.addEventListener('filtersChanged', function(event) {
      const filters = event.detail;
      filterGifts(filters);
    });

    // Category card click handlers
    const categoryCards = document.querySelectorAll('.category-card');
    categoryCards.forEach(card => {
      card.addEventListener('click', function() {
        const category = this.dataset.category;
        
        // Set the category filter
        const categorySelect = document.getElementById('category');
        if (categorySelect) {
          categorySelect.value = category;
          
          // Trigger filter application
          const filterEvent = new CustomEvent('filtersChanged', {
            detail: {
              search: document.getElementById('search')?.value.toLowerCase() || '',
              category: category,
              gender: document.getElementById('gender')?.value || 'Todos',
              type: document.getElementById('type')?.value || 'Todos',
              profession: document.getElementById('profession')?.value || 'Todas',
              hobby: document.getElementById('hobby')?.value || 'Todos',
              minPrice: parseInt(document.getElementById('min-price')?.value) || 0,
              maxPrice: parseInt(document.getElementById('max-price')?.value) || Infinity,
              sort: document.getElementById('sort')?.value || 'name-asc'
            }
          });
          
          document.dispatchEvent(filterEvent);
        }
        
        // Scroll to gifts section
        const giftsSection = document.getElementById('regalos');
        if (giftsSection) {
          giftsSection.scrollIntoView({ behavior: 'smooth' });
        }
      });
    });

    function filterGifts(filters) {
      // Refresh gifts list in case new ones were added
      allGifts = getAllGifts();
      
      let filteredGifts = allGifts.filter(giftCard => {
        const giftData = extractGiftData(giftCard);
        
        // Search filter
        if (filters.search && !giftData.name.toLowerCase().includes(filters.search.toLowerCase())) {
          return false;
        }
        
        // Category filter
        if (filters.category !== 'Todos' && giftData.category !== filters.category) {
          return false;
        }
        
        // Gender filter
        if (filters.gender !== 'Todos' && giftData.gender !== filters.gender) {
          return false;
        }
        
        // Type filter
        if (filters.type !== 'Todos' && giftData.type !== filters.type) {
          return false;
        }
        
        // Group filter
        if (filters.group !== 'Todos' && giftData.group && giftData.group !== filters.group) {
          return false;
        }
        
        // Profession filter
        if (filters.profession !== 'Todas' && giftData.profession && !giftData.profession.includes(filters.profession)) {
          return false;
        }
        
        // Hobby filter  
        if (filters.hobby !== 'Todos' && giftData.hobby && !giftData.hobby.includes(filters.hobby)) {
          return false;
        }
        
        // Price range filter
        if (giftData.price < filters.minPrice || giftData.price > filters.maxPrice) {
          return false;
        }
        
        return true;
      });

      // Sort gifts
      filteredGifts.sort((a, b) => {
        const aData = extractGiftData(a);
        const bData = extractGiftData(b);
        
        switch (filters.sort) {
          case 'name-asc':
            return aData.name.localeCompare(bData.name);
          case 'name-desc':
            return bData.name.localeCompare(aData.name);
          case 'price-asc':
            return aData.price - bData.price;
          case 'price-desc':
            return bData.price - aData.price;
          case 'category':
            return aData.category.localeCompare(bData.category);
          default:
            return 0;
        }
      });

      // Show/hide gifts
      allGifts.forEach(gift => {
        gift.style.display = 'none';
      });

      filteredGifts.forEach(gift => {
        gift.style.display = 'block';
      });

      // Show/hide no results message
      if (filteredGifts.length === 0) {
        noResults.style.display = 'block';
      } else {
        noResults.style.display = 'none';
      }

      // Update results count (if you want to add this feature)
      console.log(`Showing ${filteredGifts.length} of ${allGifts.length} gifts`);
    }

    function extractGiftData(giftCard) {
      const title = giftCard.querySelector('.gift-title')?.textContent || '';
      const priceText = giftCard.querySelector('.gift-price')?.textContent || '0';
      const price = parseFloat(priceText.replace(/[^\d]/g, '') || '0');
      
      // Extract category from tags
      const categoryTag = giftCard.querySelector('.category-tag')?.textContent || '';
      const typeAttr = giftCard.dataset.type || '';
      
      // Extract gender from tags
      const genderTag = giftCard.querySelector('.gender-tag')?.textContent || 'unisex';
      
      // Extract profession and hobby from data attributes
      const profession = giftCard.dataset.profession || '';
      const hobby = giftCard.dataset.hobby || '';
      const group = giftCard.dataset.group || '';
      
      return {
        name: title,
        price: price,
        category: categoryTag,
        type: typeAttr,
        gender: genderTag,
        profession: profession,
        hobby: hobby,
        group: group
      };
    }

    // Smooth scrolling for navigation links
    document.querySelectorAll('a[href^="#"]').forEach(anchor => {
      anchor.addEventListener('click', function (e) {
        e.preventDefault();
        const target = document.querySelector(this.getAttribute('href'));
        if (target) {
          target.scrollIntoView({
            behavior: 'smooth',
            block: 'start'
          });
        }
      });
    });

    // Contact form submission
    const contactForm = document.querySelector('.form');
    if (contactForm) {
      contactForm.addEventListener('submit', function(e) {
        e.preventDefault();
        
        // Here you would typically send the form data to your server
        alert('¡Gracias por tu mensaje! Te contactaremos pronto.');
        
        // Reset form
        this.reset();
      });
    }
  });

</script>